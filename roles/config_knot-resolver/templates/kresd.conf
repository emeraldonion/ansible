-- Load modules
modules = {
    "hints > iterate",
    "stats", -- Track internal statistics
    "predict", -- Prefetch expiring/frequent records
    "nsid", -- Server identification
    "prefill", -- Prefill root zone
    "cache", -- Record cache
    "http" -- HTTP API
}

-- Cache
cache.size = 1 * GB

-- Prefill root zone
prefill.config({
    ["."] = {
        url = "https://www.internic.net/domain/root.zone",
        interval = 86400 -- Pull root zone every 24 hours
    }
})

-- DNSSEC root key
trust_anchors.add_file("/var/lib/knot-resolver/root.key")

-- Instance identifier (NSID) and id.server
nsid.name("{{ inventory_hostname }}")
policy.add(
    policy.suffix(
        policy.ANSWER(
            { [kres.type.TXT] = { rdata={"\005{{ inventory_hostname }}"}, ttl=300 } }
        ), { todname('id.server') }
    )
)

-- TLS configuration
net.tls("/opt/dns/cert.pem", "/opt/dns/key.pem")

-- Remote cache purge
local cache_purge = {"text/plain",
    function (h, stream)
        local m = h:get(":method")
        if m == "POST" then
            local zone = stream:get_body_as_string()
            log("[cachepurge] purging %s", zone)
            cache.clear(zone, true)
            return 200, "Purged\n"
        else
            return 400, "Bad request\n"
        end
    end
}

-- Enable TLS on API
http.config({
    tls = true,
    endpoints = { ["/cache-purge"] = cache_purge }
}, "cachepurge")

-- Local listeners
net.listen('127.0.0.1', 53, { kind = 'dns' })
net.listen('::1', 53, { kind = 'dns'})
net.listen('127.0.0.1', 853, { kind = 'tls' })
net.listen('::1', 853, { kind = 'tls' })
net.listen('127.0.0.1', 443, { kind = 'doh2' })
net.listen('::1', 443, { kind = 'doh2' })
net.listen("127.0.0.1", 8453, { kind = "webmgmt" })
net.listen("127.0.0.1", 8080, { kind="cachepurge" })

-- Outgoing source address
net.outgoing_v4("{{ ansible_default_ipv4.address }}")
-- net.outgoing_v6("{{ ansible_default_ipv6.address }}")
